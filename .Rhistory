knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(glmnet)
library(caret)
library(Metrics)
<<<<<<< HEAD
listings = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
head(listings)
colnames(listings)
# Converting price to be numeric, removing $ and , to make it possible
listings = listings %>%
mutate(price = as.numeric(gsub("[$,]", "", price)))
# Check the first few rows of the updated dataframe
head(listings)
ggplot(data = listings, aes(x=price, y = neighbourhood_cleansed)) + geom_violin(col="blue")+ geom_boxplot(col="purple")+labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Neighbourhood")
# Filter out the outliers so it is easier to see the graphs
listings_filtered = listings %>%
filter(price < 1500)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) + geom_boxplot(col = "purple") +labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Neighbourhood")
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_violin(col = "purple") +labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Neighbourhood")
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = room_type)) +
geom_violin(col = "blue", width= 1.5)+
geom_boxplot(col = "purple", width=0.2) +
theme_minimal() +
labs(
title = "Distribution of Price by Property Type",
x = "Price",
y = "Property Type"
)
ggplot(data = listings_filtered, aes(x = price, y = room_type)) + geom_violin(col = "blue", width= 1.5)+ geom_boxplot(col = "purple", width=0.2) + labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Room Type")
ggplot(data = listings, aes(y=neighbourhood, fill=room_type)) + ylab("Neighbourhood") + geom_barh(col="black", size=0.3) + scale_fill_manual(values=c("plum", "purple", "blue", "navy")) + ggtitle("Distribution of Room Types per Neighbourhood") + theme_minimal()
#creating the confidence intervals and getting mean price for each neighbourhood
neighbourhood_means = listings %>%
group_by(neighbourhood_cleansed) %>%
summarize(
mean_price = mean(price, na.rm = TRUE),
lower_ci = t.test(price, conf.level = 0.95)$conf.int[1],
upper_ci = t.test(price, conf.level = 0.95)$conf.int[2]
)
head(neighbourhood_means)
ggplot(neighbourhood_means, aes(x = reorder(neighbourhood_cleansed, mean_price), y = mean_price)) +
geom_bar(stat = "identity", col = 'red', fill = 'blue', width = 0.7) +labs(title = "Neighborhood Mean Prices", x = "Neighbourhood", y = "Mean Price") + coord_flip()
plot(mean.aov)
#plotting the confidence intervals
ggplot(neighbourhood_means, aes(x = reorder(neighbourhood_cleansed, mean_price), y = mean_price)) + geom_point() + geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) + coord_flip() + labs(x = "Neighbourhood", y = "Mean Price", title = "Mean Price by Neighborhood with Confidence Intervals")
# Seeing what columns have too many missing values, we will remove these
missing_values = is.na(listings)
missing_counts = colSums(missing_values)
columns5000_missing = missing_counts[missing_counts >5000]
print(columns5000_missing)
#create a feature for if a host has an about section? remove host_about
#other features too probably
#maybe how long someone has been a host will affect price?
listings$host_since = as.Date(listings$host_since)
listings$hostfor = as.numeric(difftime(Sys.Date(), listings$host_since, units = "days"))
sum(is.na(listings$hostfor))
# fill missing values in 'hostfor' with the mean
mean_hostfor = mean(listings$hostfor, na.rm = TRUE)
listings$hostfor[is.na(listings$hostfor)] = mean_hostfor
sum(is.na(listings$hostfor))
# fill missing 'beds' values with the median
# median is 2 and mean is 2.1 something
median_beds = median(listings$beds, na.rm = TRUE)
listings$beds[is.na(listings$beds)] = median_beds
#maybe if the host includes an in depth summary about themselves it will affect price?
listings$host_about_word_count = sapply(listings$host_about, function(text) {
words = unlist(strsplit(text, " "))
return(length(words))
})
#same for a description of the place?
# Extract the number of bathrooms available
# Need to find out how to also carry over decimal and "half-bath" listings
#if we can't do it maybe we just leave it as bathrooms_text
listings$bathrooms_count = as.numeric(gsub("[^0-9]", "", listings$bathrooms_text))
#Will need to remove this once the top part is figured out
listings$bathrooms_count <- ifelse(is.na(listings$bathrooms_count), 0, listings$bathrooms_count)
print(unique(listings$bathrooms_count))
print(unique(listings$bathrooms_text))
# Replace empty values with "f" so there isnt empty values
listings = listings %>%
mutate(host_is_superhost = ifelse(host_is_superhost == "", "f", host_is_superhost), host_has_profile_pic = ifelse(host_has_profile_pic == "", "f", host_has_profile_pic), host_identity_verified = ifelse(host_identity_verified == "", "f", host_identity_verified)
)
#removing columns that will definitely have nothing to do with price
listings = listings[, !(colnames(listings) %in% c("listing_url", "scrape_id", "last_scraped", "source", "picture_url", "host_id", "host_url", "host_thumbnail_url", "host_picture_url", "neighbourhood", "neighbourhood_group_cleansed", "license", "calendar_last_scraped", "calendar_updated", "property_type", "bedrooms", "host_since", "host_location", "host_about", "bathrooms_test", "bathrooms", "review_scores_communication", "review_scores_location", "review_scores_value", "reviews_per_month", "review_scores_accuracy", "review_scores_cleanliness", "review_scores_checkin", "host_listings_count", "host_total_listings_count", "last_review", "host_name", "calculated_host_listings_count", "calculated_host_listings_count_entire_homes", "calculated_host_listings_count_private_rooms", "calculated_host_listings_count_shared_rooms"))]
#bathrooms was removed at end because only bathroom_text will be needed, will probably have to do some feature engineering for lots of these variables
listings = listings[, !(colnames(listings) %in% c("description", "neighborhood_overview", "latitude", "longitude", "name", "amenities", "id"))]
head(listings)
colnames(listings)
#head(listings$beds)
sapply(listings, function(x) length(unique(x)))
#head(listings$calculated_host_listings_count_entire_homes)
print(unique(listings$bathrooms_count))
head(listings,10)
#price is our y variable
#For x-variables we have 15 total, there are 9 numerical and 6 categorical
print(unique(listings$host_has_profile_pic))
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
options(scipen = 999) # For Readability
set.seed(2023)
trainIndex = createDataPartition(listings$price, p = .8,
list = FALSE,
times = 1)
data_train = listings[ trainIndex,]
data_test  = listings[-trainIndex,]
# Fit a linear regression model
linearmodel = lm(price ~ ., data = data_train)
# Make predictions on the test data
predictions = predict(linearmodel, newdata = data_test)
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
options(scipen = 999) # For Readability
set.seed(2023)
trainIndex = createDataPartition(listings$price, p = .8,
list = FALSE,
times = 1)
data_train = listings[ trainIndex,]
data_test  = listings[-trainIndex,]
# Fit a linear regression model
linearmodel = lm(price ~ ., data = data_train)
# Make predictions on the test data
predictions = predict(linearmodel, newdata = data_test)
ggplot(data = listings, aes(y=neighbourhood, fill=room_type)) + ylab("Neighbourhood") + geom_barh() + scale_fill_manual(values=c("plum", "purple", "blue", "navy")) + ggtitle("Distribution of Room Types per Neighbourhood")
library(ggplot2)
library(dplyr)
library(glmnet)
library(caret)
library(Metrics)
library(ggplot2)
library(dplyr)
library(glmnet)
library(caret)
library(Metrics)
ggplot(data = listings, aes(y=neighbourhood, fill=room_type)) + ylab("Neighbourhood") + geom_barh() + scale_fill_manual(values=c("plum", "purple", "blue", "navy")) + ggtitle("Distribution of Room Types per Neighbourhood")
head(listings,10)
#price is our y variable
#For x-variables we have 15 total, there are 9 numerical and 6 categorical
print(unique(listings$host_has_profile_pic))
#head(listings$calculated_host_listings_count_entire_homes)
print(unique(listings$bathrooms_count))
sapply(listings, function(x) length(unique(x)))
#removing columns that will definitely have nothing to do with price
listings = listings[, !(colnames(listings) %in% c("listing_url", "scrape_id", "last_scraped", "source", "picture_url", "host_id", "host_url", "host_thumbnail_url", "host_picture_url", "neighbourhood", "neighbourhood_group_cleansed", "license", "calendar_last_scraped", "calendar_updated", "property_type", "bedrooms", "host_since", "host_location", "host_about", "bathrooms_test", "bathrooms", "review_scores_communication", "review_scores_location", "review_scores_value", "reviews_per_month", "review_scores_accuracy", "review_scores_cleanliness", "review_scores_checkin", "host_listings_count", "host_total_listings_count", "last_review", "host_name", "calculated_host_listings_count", "calculated_host_listings_count_entire_homes", "calculated_host_listings_count_private_rooms", "calculated_host_listings_count_shared_rooms"))]
#bathrooms was removed at end because only bathroom_text will be needed, will probably have to do some feature engineering for lots of these variables
listings = listings[, !(colnames(listings) %in% c("description", "neighborhood_overview", "latitude", "longitude", "name", "amenities", "id"))]
head(listings)
colnames(listings)
#head(listings$beds)
# Seeing what columns have too many missing values, we will remove these
missing_values = is.na(listings)
missing_counts = colSums(missing_values)
columns5000_missing = missing_counts[missing_counts >5000]
print(columns5000_missing)
#create a feature for if a host has an about section? remove host_about
#other features too probably
#maybe how long someone has been a host will affect price?
listings$host_since = as.Date(listings$host_since)
# fill missing 'beds' values with the median
# median is 2 and mean is 2.1 something
median_beds = median(listings$beds, na.rm = TRUE)
listings$beds[is.na(listings$beds)] = median_beds
#maybe if the host includes an in depth summary about themselves it will affect price?
listings$host_about_word_count = sapply(listings$host_about, function(text) {
words = unlist(strsplit(text, " "))
return(length(words))
})
=======
myfilepath = "C://Users//ethan//Downloads//Term Project Data//listings.csv"
listings = read.csv(myfilepath)
knitr::opts_chunk$set(echo = TRUE)
library(binom)
library(car)
library(collapsibleTree)
library(dbplyr)
library(dplyr)
library(EnvStats)
library(ggformula)
library(ggplot2)
library(gmodels)
knitr::opts_chunk$set(echo = TRUE)
library(binom)
library(car)
library(collapsibleTree)
library(dbplyr)
library(dplyr)
library(EnvStats)
library(ggformula)
library(ggplot2)
library(gmodels)
library(htmltools)
library(ISLR)
library(knitr)
library(lawstat)
library(markdown)
library(mosaic)
library(mdsr)
library(mosaicData)
library(nycflights13)
library(olsrr)
library(plyr)
library(purrr)
library(plotly)
library(resampledata)
library(rmarkdown)
library(rpart)
library(rpart.plot)
library(rvest)
library(SDaA)
library(shiny)
library(stringi)
library(tibble)
library(tidyr)
library(tidyselect)
library(tinytex)
library(yaml)
library(shiny)
library(forcats)
listings_raw = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
# only selecting the columns required for the analysis
listings = select(listings_raw,
id,
listing_url,
neighbourhood_cleansed,
latitude,
longitude,
property_type,
room_type,
accommodates,
amenities,
price,
number_of_reviews,
review_scores_rating,
review_scores_accuracy
)
# renaming the neighbourhood_cleansed column
colnames(listings)[3] = "neighbourhood"
# converting price column datatype to numeric
listings = listings %>%
mutate(price = as.numeric(gsub("[$,]", "", price)))
head(listings,5)
ggplot(listings, aes(x=neighbourhood, y=price)) +
geom_boxplot(width=0.5) +
coord_flip()
listings_filtered = listings %>%
filter(price < 1500)
ggplot(listings_filtered, aes(x=room_type, y=price)) +
geom_violin(col="black", fill="orange", width=1) +
geom_boxplot(col="black", fill="blue", width=0.2) +
coord_flip()
neighbourhood_means = listings %>%
group_by(neighbourhood) %>%
summarize(
mean_price = mean(price, na.rm=TRUE),
lower_ci = t.test(price, conf.level=0.95)$conf.int[1],
upper_ci = t.test(price, conf.level=0.95)$conf.int[2]
)
head(neighbourhood_means)
price_nh_rt = listings %>% group_by(neighbourhood, room_type) %>% summarise(number_of_reviews = sum(number_of_reviews), .groups="drop")
ggplot(price_nh_rt, aes(x=reorder(neighbourhood,-number_of_reviews), y=number_of_reviews, fill=room_type)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x=element_text(angle=90)) +
xlab("Neighbourhoods") +
ylab("Total Reviews") +
ggtitle("Total Reviews by Neighbourhood and Room Type") +
labs(fill="Room type")
top2.neighbourhoods = listings %>%
filter(neighbourhood=="Sydney" | neighbourhood=="Waverley", room_type=="Entire home/apt", price < 1500)
head(top2.neighbourhoods,10)
favstats(~price|neighbourhood, data=sm1)
price_nh_rt = listings %>% group_by(neighbourhood, room_type) %>% summarise(number_of_reviews = sum(number_of_reviews), .groups="drop")
ggplot(price_nh_rt, aes(x=reorder(neighbourhood,-number_of_reviews), y=number_of_reviews, fill=room_type)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x=element_text(angle=90)) +
xlab("Neighbourhoods") +
ylab("Total Reviews") +
ggtitle("Total Reviews by Neighbourhood and Room Type") +
labs(fill="Room type")
top2.neighbourhoods = listings %>%
filter(neighbourhood=="Sydney" | neighbourhood=="Waverley", room_type=="Entire home/apt", price < 1500)
# Filter out the outliers so it is easier to see the graphs
listings_filtered <- listings %>%
filter(price < 1500)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_boxplot(col = "purple") +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Neighbourhood"
)
myfilepath = "C://Users//ethan//Downloads//Term Project Data//listings.csv"
listings = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
head(listings)
colnames(listings)
>>>>>>> 10420c352747c0b25b64213f7f5a2fbbe8ebfb5f
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(glmnet)
library(caret)
library(Metrics)
<<<<<<< HEAD
=======
myfilepath = "C://Users//ethan//Downloads//Term Project Data//listings.csv"
>>>>>>> 10420c352747c0b25b64213f7f5a2fbbe8ebfb5f
listings = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
head(listings)
colnames(listings)
# Converting price to be numeric, removing $ and , to make it possible
<<<<<<< HEAD
listings = listings %>%
mutate(price = as.numeric(gsub("[$,]", "", price)))
# Check the first few rows of the updated dataframe
head(listings)
ggplot(data = listings, aes(x=price, y = neighbourhood_cleansed)) + geom_violin(col="blue")+ geom_boxplot(col="purple")+labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Neighbourhood")
# Filter out the outliers so it is easier to see the graphs
listings_filtered = listings %>%
filter(price < 1500)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) + geom_boxplot(col = "purple") +labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Neighbourhood")
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_violin(col = "purple") +labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Neighbourhood")
=======
listings <- listings %>%
mutate(price = as.numeric(gsub("[$,]", "", price)))
# Check the first few rows of the updated dataframe
head(listings)
ggplot(data = listings, aes(x=price, y = neighbourhood_cleansed)) + geom_violin(col="blue")+ geom_boxplot(col="purple") + theme_minimal()
# Filter out the outliers so it is easier to see the graphs
listings_filtered <- listings %>%
filter(price < 1500)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_boxplot(col = "purple") +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Neighbourhood"
)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_violin(col = "purple") +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Neighbourhood"
)
>>>>>>> 10420c352747c0b25b64213f7f5a2fbbe8ebfb5f
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = room_type)) +
geom_violin(col = "blue", width= 1.5)+
geom_boxplot(col = "purple", width=0.2) +
theme_minimal() +
labs(
<<<<<<< HEAD
title = "Distribution of Price by Property Type",
x = "Price",
y = "Property Type"
)
ggplot(data = listings_filtered, aes(x = price, y = room_type)) + geom_violin(col = "blue", width= 1.5)+ geom_boxplot(col = "purple", width=0.2) + labs(title = "Distribution of Price by Neighbourhood", x = "Price", y = "Room Type")
ggplot(data = listings, aes(y=neighbourhood, fill=room_type)) + ylab("Neighbourhood") + geom_barh(col="black", size=0.3) + scale_fill_manual(values=c("plum", "purple", "blue", "navy")) + ggtitle("Distribution of Room Types per Neighbourhood") + theme_minimal()
=======
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Room Type"
)
#removing columns that will definitely have nothing to do with price
listings = listings[, !(colnames(listings) %in% c("listing_url", "scrape_id", "last_scraped", "source", "picture_url", "host_id", "host_url", "host_thumbnail_url", "host_picture_url", "neighbourhood", "neighbourhood_group_cleansed", "license", "calendar_last_scraped", "calendar_updated", "bathrooms"))]
#bathrooms was removed at end because only bathroom_text will be needed, will probably have to do some feature engineering for lots of these variables
listings = listings[, !(colnames(listings) %in% c("bathrooms", "description", "neighborhood_overview", "latitude", "longitude", "name", "amenities", "id"))]
head(listings)
colnames(listings)
#maybe create a feature for how long someone has been a host? remove host_since
#create a feature for if a host has an about section? remove host_about
#other features too probably
sapply(listings, function(x) length(unique(x)))
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
trainIndex = createDataPartition(listings$price, p = .8,
list = FALSE,
times = 1)
data_train = listings[ trainIndex,]
data_test  = listings[-trainIndex,]
# Fit a linear regression model   WILL need to change the x variables later, just have bedrooms listed until other features are decided
model = lm(price ~bedrooms , data = data_train)
# Make predictions on the test data
predictions = predict(model, newdata = data_test)
#summary of the model
summary(model)
rmse_value = rmse(predictions, data_test$price)
mse_value = mse(predictions, data_test$price)
mae_value = mae(predictions, data_test$price)
# Print the evaluation metrics
cat("Mean Squared Error (MSE):", mse_value, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_value, "\n")
cat("Mean Absolute Error (MAE):", mae_value, "\n")
#this is the code from a previous example so will definitely need to adjust it a bit
#lasso has alpha =1 and elastic net anything between 0 and 1, most commonly 0.5
#cv.ridge <- cv.glmnet(x.ridge, y.ridge, alpha = 0, family = "binomial")
#model.ridge <- glmnet(x.ridge, y.ridge, alpha =0, family = "binomial", lambda = cv.ridge$lambda.min)
#x.ridge.test <- model.matrix(TenYearCHD ~., test_data)[,-1]
#probabilities.ridge <- model.ridge %>% predict(newx = x.ridge.test)
citation('ggplot2')
citation('dplyr')
citation('glmnet')
citation('caret')
citation('Metrics')
ggplot(top2.neighbourhoods, aes(x=neighbourhood, y=price)) +
geom_violin(col="black", fill="orange", width=1) +
geom_boxplot(col="black", fill="orange", width=0.2) +
coord_flip()
t.test(~price|neighbourhood, data=top2.neighbourhoods, alternative="less", conf.level=0.95)
x.sydney = favstats(~price|neighbourhood, data=top2.neighbourhoods)$n[1] # number of Entire home/apt room type
n.sydney = favstats(~price|neighbourhood, data=listings)$n[33] # total number of listings
prop.test(c(x.sydney, x.waverly), c(n.sydney, n.waverly), alternative="greater", conf.level=0.95)
>>>>>>> 10420c352747c0b25b64213f7f5a2fbbe8ebfb5f
