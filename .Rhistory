knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(glmnet)
library(caret)
library(Metrics)
myfilepath = "C://Users//ethan//Downloads//Term Project Data//listings.csv"
listings = read.csv(myfilepath)
knitr::opts_chunk$set(echo = TRUE)
library(binom)
library(car)
library(collapsibleTree)
library(dbplyr)
library(dplyr)
library(EnvStats)
library(ggformula)
library(ggplot2)
library(gmodels)
knitr::opts_chunk$set(echo = TRUE)
library(binom)
library(car)
library(collapsibleTree)
library(dbplyr)
library(dplyr)
library(EnvStats)
library(ggformula)
library(ggplot2)
library(gmodels)
library(htmltools)
library(ISLR)
library(knitr)
library(lawstat)
library(markdown)
library(mosaic)
library(mdsr)
library(mosaicData)
library(nycflights13)
library(olsrr)
library(plyr)
library(purrr)
library(plotly)
library(resampledata)
library(rmarkdown)
library(rpart)
library(rpart.plot)
library(rvest)
library(SDaA)
library(shiny)
library(stringi)
library(tibble)
library(tidyr)
library(tidyselect)
library(tinytex)
library(yaml)
library(shiny)
library(forcats)
listings_raw = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
# only selecting the columns required for the analysis
listings = select(listings_raw,
id,
listing_url,
neighbourhood_cleansed,
latitude,
longitude,
property_type,
room_type,
accommodates,
amenities,
price,
number_of_reviews,
review_scores_rating,
review_scores_accuracy
)
# renaming the neighbourhood_cleansed column
colnames(listings)[3] = "neighbourhood"
# converting price column datatype to numeric
listings = listings %>%
mutate(price = as.numeric(gsub("[$,]", "", price)))
head(listings,5)
ggplot(listings, aes(x=neighbourhood, y=price)) +
geom_boxplot(width=0.5) +
coord_flip()
listings_filtered = listings %>%
filter(price < 1500)
ggplot(listings_filtered, aes(x=room_type, y=price)) +
geom_violin(col="black", fill="orange", width=1) +
geom_boxplot(col="black", fill="blue", width=0.2) +
coord_flip()
neighbourhood_means = listings %>%
group_by(neighbourhood) %>%
summarize(
mean_price = mean(price, na.rm=TRUE),
lower_ci = t.test(price, conf.level=0.95)$conf.int[1],
upper_ci = t.test(price, conf.level=0.95)$conf.int[2]
)
head(neighbourhood_means)
price_nh_rt = listings %>% group_by(neighbourhood, room_type) %>% summarise(number_of_reviews = sum(number_of_reviews), .groups="drop")
ggplot(price_nh_rt, aes(x=reorder(neighbourhood,-number_of_reviews), y=number_of_reviews, fill=room_type)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x=element_text(angle=90)) +
xlab("Neighbourhoods") +
ylab("Total Reviews") +
ggtitle("Total Reviews by Neighbourhood and Room Type") +
labs(fill="Room type")
top2.neighbourhoods = listings %>%
filter(neighbourhood=="Sydney" | neighbourhood=="Waverley", room_type=="Entire home/apt", price < 1500)
head(top2.neighbourhoods,10)
favstats(~price|neighbourhood, data=sm1)
price_nh_rt = listings %>% group_by(neighbourhood, room_type) %>% summarise(number_of_reviews = sum(number_of_reviews), .groups="drop")
ggplot(price_nh_rt, aes(x=reorder(neighbourhood,-number_of_reviews), y=number_of_reviews, fill=room_type)) +
geom_bar(position="stack", stat="identity") +
theme(axis.text.x=element_text(angle=90)) +
xlab("Neighbourhoods") +
ylab("Total Reviews") +
ggtitle("Total Reviews by Neighbourhood and Room Type") +
labs(fill="Room type")
top2.neighbourhoods = listings %>%
filter(neighbourhood=="Sydney" | neighbourhood=="Waverley", room_type=="Entire home/apt", price < 1500)
# Filter out the outliers so it is easier to see the graphs
listings_filtered <- listings %>%
filter(price < 1500)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_boxplot(col = "purple") +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Neighbourhood"
)
myfilepath = "C://Users//ethan//Downloads//Term Project Data//listings.csv"
listings = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
head(listings)
colnames(listings)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(glmnet)
library(caret)
library(Metrics)
myfilepath = "C://Users//ethan//Downloads//Term Project Data//listings.csv"
listings = read.csv("https://raw.githubusercontent.com/ethan2411/Data-601-602/main/listings.csv")
head(listings)
colnames(listings)
# Converting price to be numeric, removing $ and , to make it possible
listings <- listings %>%
mutate(price = as.numeric(gsub("[$,]", "", price)))
# Check the first few rows of the updated dataframe
head(listings)
ggplot(data = listings, aes(x=price, y = neighbourhood_cleansed)) + geom_violin(col="blue")+ geom_boxplot(col="purple") + theme_minimal()
# Filter out the outliers so it is easier to see the graphs
listings_filtered <- listings %>%
filter(price < 1500)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_boxplot(col = "purple") +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Neighbourhood"
)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = neighbourhood_cleansed)) +
geom_violin(col = "purple") +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Neighbourhood"
)
# Create the plot using the filtered data
ggplot(data = listings_filtered, aes(x = price, y = room_type)) +
geom_violin(col = "blue", width= 1.5)+
geom_boxplot(col = "purple", width=0.2) +
theme_minimal() +
labs(
title = "Distribution of Price by Neighbourhood",
x = "Price",
y = "Room Type"
)
#removing columns that will definitely have nothing to do with price
listings = listings[, !(colnames(listings) %in% c("listing_url", "scrape_id", "last_scraped", "source", "picture_url", "host_id", "host_url", "host_thumbnail_url", "host_picture_url", "neighbourhood", "neighbourhood_group_cleansed", "license", "calendar_last_scraped", "calendar_updated", "bathrooms"))]
#bathrooms was removed at end because only bathroom_text will be needed, will probably have to do some feature engineering for lots of these variables
listings = listings[, !(colnames(listings) %in% c("bathrooms", "description", "neighborhood_overview", "latitude", "longitude", "name", "amenities", "id"))]
head(listings)
colnames(listings)
#maybe create a feature for how long someone has been a host? remove host_since
#create a feature for if a host has an about section? remove host_about
#other features too probably
sapply(listings, function(x) length(unique(x)))
# Split the data into training and testing sets
set.seed(123)  # For reproducibility
trainIndex = createDataPartition(listings$price, p = .8,
list = FALSE,
times = 1)
data_train = listings[ trainIndex,]
data_test  = listings[-trainIndex,]
# Fit a linear regression model   WILL need to change the x variables later, just have bedrooms listed until other features are decided
model = lm(price ~bedrooms , data = data_train)
# Make predictions on the test data
predictions = predict(model, newdata = data_test)
#summary of the model
summary(model)
rmse_value = rmse(predictions, data_test$price)
mse_value = mse(predictions, data_test$price)
mae_value = mae(predictions, data_test$price)
# Print the evaluation metrics
cat("Mean Squared Error (MSE):", mse_value, "\n")
cat("Root Mean Squared Error (RMSE):", rmse_value, "\n")
cat("Mean Absolute Error (MAE):", mae_value, "\n")
#this is the code from a previous example so will definitely need to adjust it a bit
#lasso has alpha =1 and elastic net anything between 0 and 1, most commonly 0.5
#cv.ridge <- cv.glmnet(x.ridge, y.ridge, alpha = 0, family = "binomial")
#model.ridge <- glmnet(x.ridge, y.ridge, alpha =0, family = "binomial", lambda = cv.ridge$lambda.min)
#x.ridge.test <- model.matrix(TenYearCHD ~., test_data)[,-1]
#probabilities.ridge <- model.ridge %>% predict(newx = x.ridge.test)
citation('ggplot2')
citation('dplyr')
citation('glmnet')
citation('caret')
citation('Metrics')
ggplot(top2.neighbourhoods, aes(x=neighbourhood, y=price)) +
geom_violin(col="black", fill="orange", width=1) +
geom_boxplot(col="black", fill="orange", width=0.2) +
coord_flip()
t.test(~price|neighbourhood, data=top2.neighbourhoods, alternative="less", conf.level=0.95)
x.sydney = favstats(~price|neighbourhood, data=top2.neighbourhoods)$n[1] # number of Entire home/apt room type
n.sydney = favstats(~price|neighbourhood, data=listings)$n[33] # total number of listings
prop.test(c(x.sydney, x.waverly), c(n.sydney, n.waverly), alternative="greater", conf.level=0.95)
